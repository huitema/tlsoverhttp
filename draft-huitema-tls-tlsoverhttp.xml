<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [

<!ENTITY rfc2026 PUBLIC ''
   'http://xml.resource.org/public/rfc/bibxml/reference.RFC.2026.xml'>
<!ENTITY rfc2246 PUBLIC ''
   'http://xml.resource.org/public/rfc/bibxml/reference.RFC.2246.xml'>
<!ENTITY rfc2616 PUBLIC ''
   'http://xml.resource.org/public/rfc/bibxml/reference.RFC.2616.xml'>
<!ENTITY rfc2818 PUBLIC ''
   'http://xml.resource.org/public/rfc/bibxml/reference.RFC.2818.xml'>
<!ENTITY rfc5246 PUBLIC ''
   'http://xml.resource.org/public/rfc/bibxml/reference.RFC.5246.xml'>
<!ENTITY rfc6455 PUBLIC ''
   'http://xml.resource.org/public/rfc/bibxml/reference.RFC.6455.xml'>

<!ENTITY I-D.ietf-httpbis-http2 PUBLIC ''  
   "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.ietf-httpbis-http2.xml"> 

<!ENTITY I-D.ietf-tls-tls13 PUBLIC ''  
   "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.ietf-tls-tls13.xml"> 

]>

<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<?rfc compact="yes"?>
<?rfc toc="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>

<!-- Expand crefs and put them inline -->
<?rfc comments='yes' ?>
<?rfc inline='yes' ?>

<rfc category="exp" 
     docName="draft-huitema-tls-tlsoverhttp-00.txt" 
     ipr="trust200902">

<front>
    <title abbrev="TLS over HTTP (HTLS)">
      TLS over HTTP
    </title>

   <author fullname="Christian Huitema" initials="C." surname="Huitema">
      <organization>Microsoft</organization>
      <address>
        <postal>
          <street> </street>
          <city>Redmond</city>
          <code>98052</code>
          <region>WA</region>
          <country>U.S.A.</country>
        </postal>
        <email>huitema@microsoft.com</email>
      </address>
    </author>

    <date year="2015" month="March"/>

    <abstract>
        <t> 
We observe that attacks against HTTPS are getting more and more popular.
The attacks typically exploit weaknesses in PKI certificate verification
software. These weaknesses allow a third party to insert itself as a 
Man-In-The-Middle in a TLS connection, accessing the content of messages
that were previously encrypted and in some case changing these messages.
        </t>
<t>
TLS over HTTP allows clients and servers to carry a TLS conversation
on top of HTTP, and thus bypass the man in the middle attackers. 
Different deployment models are possible, e.g., HTTP over TLS over HTTP,
application over TLS over HTTP, or HTTP over TLS over HTTP over TLS.
</t>
<t>
The proposed solution allows for reuse of the existing TLS 
implementation, thus minimizing the development costs and risks. It includes 
optional obfuscation layer, to maximize likelihood of working unnoticed
by firewalls an other MITM boxes.
</t>
    </abstract>
</front>

<middle>
<section title="Introduction">
<t>
Following the Snowden revelation, there has been an increased push to deploy
encryption over the Internet. The IAB reinforced this trend official by publishing the
IAB Statement on Internet Confidentiality <xref target="IABConfidentiality" />.
Of course, every action brings a reaction, and the push for encryption
is countered by the deployment of encryption-breaking middle-boxes. 
The middle boxes typically use weaknesses in the Certificate Verification
system of popular TLS implementations to insert themselves as
"Man in the middle" (MITM). In another class of attacks, the middleboxes will simply block 
encrypted communication, only allowing clear-text HTTP.
</t>
<t>
The MITM attacks against TLS can be detected in various ways. For example, the
TLS client might have obtained in advanced a good copy of the certificate used
by the TLS server. The client can then compare the value used in the TLS exchange
to the value in the good copy. If they differ, the MITM attack is detected. However,
in the current state of the art, the only choice of the client are to abort the
connection, or to tolerate the encryption compromise by the middle-box.
</t>
<t>
Both the MITM attack and the clear-text only attacks can be mitigated by 
running TLS on top of HTTP (HTLS).
</t>
<section title="Requirements">
<t>
The keywords MUST, MUST NOT, REQUIRED, SHALL, SHALL NOT, SHOULD,
SHOULD NOT, RECOMMENDED, MAY, and OPTIONAL, when they appear in this
document, are to be interpreted as described in <xref target="RFC2026" />.
</t>
</section>
</section>
<section title="TLS over HTTP architecture">
<t>
The basic TLS over HTTP architecture has four layers, including a framing
layer which is conceptually placed between TCP and HTTP.
</t>
<figure anchor="TLSHTTPDiagram">
<artwork><![CDATA[
+-------------+ 
| application | 
+-------------+ 
|     TLS     | 
+-------------+
|   Framing   |
+-------------+
|    HTTP     |
+-------------+
]]></artwork>
</figure>
<t>
The framing layer is responsible for encapsulating the TLS frames into the 
HTTP protocol. 
</t>
<t>
The <xref target="TLSHTTPDiagram" /> describes the simplest stack, in which we assume
that HTTP is run "end to end." There are many possible variants, in particular
the HTTPS variant, in which HTTP is run over TLS. In that case, we will effectively 
see two instances of TLS running on top of each other.
</t>
<figure anchor="TLSHTTPSDiagram">
<artwork><![CDATA[
+-------------+ 
| application | 
+-------------+ 
|     TLS     | 
+-------------+
|   Framing   |
+-------------+
|    HTTP     |
+-------------+ 
|     TLS     | 
+-------------+
]]></artwork>
</figure>
<t>
Having two instances of TLS is obviously causing some amount of overhead. It is
however the price to pay in order to actually traverse series of middleboxes
while establishing end-to-end encryption.
</t>
<t>
This document defines framing of HTLS over web sockets <xref target="RFC6455" />.
There may be a need in the future to provide more options. For example, if
middle-boxes started to deploy inspection software to detect and prevent usage of
HTLS over web sockets, there will be a need to define
some form of obfuscation, rendering the content as indistinguishable as possible
form regular HTTP content. 
The new semantics introduced in HTTP/2.0 <xref target="I-D.ietf-httpbis-http2" /> 
will probably allow for efficient implementation of such encapsulations.
</t>
</section>
<section title="Framing with web sockets" >
<t>
The WebSocket protocol <xref target="RFC6455" /> enables applications to transmit
arbitrary binary messages over a that is initiated as HTTP or HTTPS. The web socket 
protocol is compatible with HTTP/1.1
<xref target="RFC2616" />
and with HTTP over TLS 
<xref target="RFC2818" />.
</t>
<t>
When using the web socket framing, the client will establish a web socket using the 
URL reserved by the server for HTLS over web sockets. Once the web socket has 
reached the OPEN state, both client and server will be able to send and receive 
data frames, as defined in section 6 of <xref target="RFC6455" />. Each TLS frame
will be sent as a separate Web socket data frame.
</t>
<t>
The client will start the TLS handshake as defined for the client-chosen version of TLS
in 
<xref target="RFC2246" />,
<xref target="RFC5246" />,
or
<xref target="I-D.ietf-tls-tls13" />.
Client and server will then execute the TLS protocol, and carry the application protocol
inside TLS data frames. 
</t>
<t>
We should note that, while the framing layer is conceptually layered above HTTP, the
web socket protocols really replaces HTTP after the initial negotiations. The architecture
diagram with web Socket framing really looks like:
</t>
<figure anchor="TLSHTTPWSDiagram">
<artwork><![CDATA[
              +-------------------+ 
              |    application    | 
              +-------------------+ 
              |        TLS        | 
+-------------+-------------------+
|    HTTP     | WebSocket Framing |
+-------------+-------------------+
]]></artwork>
</figure>
</section>
<section title="HTLS parameters" >
<t>
An application that starts an HTLS connection will need to specify a the HTTP or HTTPS URL 
used to establish the underlying HTTP connection and the type of framing required for the 
encapsulation.
We assume that these parameters will be passed as an end to end exchange between 
server and clients, prior to the establishment of the HTLS connection.
</t>
</section>
<section title="Security Considerations">
<t> 
The draft addresses a major security issue, the interception of 
secure connections by middle boxes that break the end to end nature of encryption.
</t>
</section>

<section title="IANA Considerations" anchor="iana">
<t> 
This draft does not require any IANA action.
</t> 
</section>

<section title="Acknowledgments">
    <t> 
Thnaks to Dave Thaler for suggesting the use of Web Sockets for encapsulating TLS in HTTPS.
    </t>
</section>
</middle>

<back>
<references title="Normative References">
    &rfc2026;
    &rfc6455;
</references>

<references title="Informative References">
    &rfc2246;
    &rfc2616;
    &rfc2818;
    &rfc5246;

    &I-D.ietf-httpbis-http2; 

    &I-D.ietf-tls-tls13;


    <reference anchor="IABConfidentiality" target="http://www.iab.org/2014/11/14/iab-statement-on-internet-confidentiality/">
        <front>
            <title>IAB Statement on Internet Confidentiality</title>
            <author fullname="IAB" />
            <date month="November" year="2014" />
            <abstract>
	    <t>
            Newly designed protocols should prefer encryption to cleartext operation.
            </t>
            </abstract>  
        </front>
    </reference>



</references>  

</back>
</rfc>
